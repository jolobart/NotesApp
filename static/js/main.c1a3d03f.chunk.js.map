{"version":3,"sources":["components/Note.js","components/AddNote.js","components/NotesList.js","components/Search.js","components/Header.js","App.js","index.js"],"names":["Note","id","text","date","handleDeleteNote","handleEditNote","handleIsCompletedNote","useState","editMode","setEditMode","inputRef","useRef","className","ref","disabled","defaultValue","onFocus","e","temp_value","target","value","onChange","size","onClick","current","focus","AddNote","handleAddNote","noteText","setNoteText","rows","cols","placeholder","length","alert","trim","NotesList","notes","sort","setSort","map","note","isCompleted","Search","handleSearchNote","type","Header","handleToggleDarkMode","previousDarkMode","App","setNotes","searchText","setSearchText","darkMode","setDarkMode","useEffect","savedNoted","JSON","parse","localStorage","getItem","setItem","stringify","filter","includes","Date","newNotes","nanoid","toLocaleDateString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1a3d03f.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport { MdDeleteForever, MdEdit, MdCheck } from \"react-icons/md\";\r\n\r\nconst Note = ({\r\n  id,\r\n  text,\r\n  date,\r\n  handleDeleteNote,\r\n  handleEditNote,\r\n  handleIsCompletedNote,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const inputRef = useRef(true);\r\n\r\n  const changeFocus = () => {\r\n    setEditMode(true);\r\n    inputRef.current.disabled = false;\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const update = (e) => {\r\n    inputRef.current.disabled = true;\r\n    setEditMode(false);\r\n  };\r\n\r\n  const moveCaretAtEnd = (e) => {\r\n    var temp_value = e.target.value;\r\n    e.target.value = \"\";\r\n    e.target.value = temp_value;\r\n  };\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <textarea\r\n        className=\"text-value\"\r\n        ref={inputRef}\r\n        disabled={inputRef}\r\n        defaultValue={text}\r\n        onFocus={moveCaretAtEnd}\r\n        onChange={(e) => {\r\n          handleEditNote(e.target.value, id);\r\n        }}\r\n      />\r\n      <div className=\"note-footer\">\r\n        <small>{date}</small>\r\n\r\n        <div>\r\n          {editMode ? (\r\n            <MdCheck\r\n              className=\"delete-icon\"\r\n              size=\"1.3em\"\r\n              onClick={(e) => update(inputRef.current.value, e)}\r\n            />\r\n          ) : (\r\n            <>\r\n              <MdCheck\r\n                className=\"delete-icon\"\r\n                size=\"1.3em\"\r\n                onClick={() => handleIsCompletedNote(id)}\r\n              />\r\n              <MdEdit\r\n                className=\"delete-icon\"\r\n                size=\"1.3em\"\r\n                onClick={() => changeFocus()}\r\n              />\r\n              <MdDeleteForever\r\n                className=\"delete-icon\"\r\n                onClick={() => {\r\n                  handleDeleteNote(id);\r\n                }}\r\n                size=\"1.3em\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import { useState } from \"react\";\r\n\r\nconst AddNote = ({ handleAddNote }) => {\r\n  const [noteText, setNoteText] = useState(\"\");\r\n  const characterLimit = 200;\r\n\r\n  const handleChange = (e) => {\r\n    if (characterLimit - e.target.value.length >= 0) {\r\n      setNoteText(e.target.value);\r\n    } else {\r\n      alert(\"200 characters only!\");\r\n    }\r\n  };\r\n\r\n  const handleSaveClick = () => {\r\n    if (noteText.trim().length > 0) {\r\n      handleAddNote(noteText);\r\n      setNoteText(\"\");\r\n    } else {\r\n      alert(\"Please add note!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"note new\">\r\n      <textarea\r\n        rows=\"8\"\r\n        cols=\"10\"\r\n        placeholder=\"Type to add a note...\"\r\n        value={noteText}\r\n        onChange={handleChange}\r\n      ></textarea>\r\n      <div className=\"note-footer\">\r\n        <small>{characterLimit - noteText.length} Remaining</small>\r\n        <button className=\"save\" onClick={handleSaveClick}>\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNote;\r\n","import { useState } from \"react\";\r\nimport Note from \"./Note\";\r\nimport AddNote from \"./AddNote\";\r\n\r\nconst NotesList = ({\r\n  notes,\r\n  handleAddNote,\r\n  handleDeleteNote,\r\n  handleEditNote,\r\n  handleIsCompletedNote,\r\n}) => {\r\n  const [sort, setSort] = useState(\"active\");\r\n  return (\r\n    <>\r\n      <div className=\"sort-buttons\">\r\n        <button className=\"save\" onClick={() => setSort(\"active\")}>\r\n          Active\r\n        </button>\r\n        <button className=\"save\" onClick={() => setSort(\"completed\")}>\r\n          Completed\r\n        </button>\r\n        <button className=\"save\" onClick={() => setSort(\"all\")}>\r\n          All\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"notes-list\">\r\n        <AddNote handleAddNote={handleAddNote} />\r\n\r\n        {notes.length > 0 && sort === \"active\"\r\n          ? notes.map((note) => {\r\n              return (\r\n                note.isCompleted === false && (\r\n                  <Note\r\n                    key={note.id}\r\n                    id={note.id}\r\n                    text={note.text}\r\n                    date={note.date}\r\n                    handleDeleteNote={handleDeleteNote}\r\n                    handleEditNote={handleEditNote}\r\n                    handleIsCompletedNote={handleIsCompletedNote}\r\n                  />\r\n                )\r\n              );\r\n            })\r\n          : null}\r\n\r\n        {notes.length > 0 && sort === \"all\"\r\n          ? notes.map((note) => (\r\n              <Note\r\n                key={note.id}\r\n                id={note.id}\r\n                text={note.text}\r\n                date={note.date}\r\n                handleDeleteNote={handleDeleteNote}\r\n                handleEditNote={handleEditNote}\r\n                handleIsCompletedNote={handleIsCompletedNote}\r\n              />\r\n            ))\r\n          : null}\r\n\r\n        {notes.length > 0 && sort === \"completed\"\r\n          ? notes.map((note) => {\r\n              return (\r\n                note.isCompleted === true && (\r\n                  <Note\r\n                    key={note.id}\r\n                    id={note.id}\r\n                    text={note.text}\r\n                    date={note.date}\r\n                    handleDeleteNote={handleDeleteNote}\r\n                    handleEditNote={handleEditNote}\r\n                    handleIsCompletedNote={handleIsCompletedNote}\r\n                  />\r\n                )\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotesList;\r\n","import React from \"react\";\r\nimport { MdSearch } from \"react-icons/md\";\r\n\r\nconst Search = ({ handleSearchNote }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <MdSearch className=\"search-icons\" size=\"1.3em\"></MdSearch>\r\n      <input\r\n        onChange={(e) => handleSearchNote(e.target.value)}\r\n        type=\"text\"\r\n        placeholder=\"type to search\"\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ handleToggleDarkMode }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Notes</h1>\r\n      <button\r\n        onClick={() =>\r\n          handleToggleDarkMode((previousDarkMode) => !previousDarkMode)\r\n        }\r\n        className=\"save\"\r\n      >\r\n        Dark Mode\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import NotesList from \"./components/NotesList\";\nimport Search from \"./components/Search\";\nimport Header from \"./components/Header\";\nimport { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const savedNoted = JSON.parse(localStorage.getItem(\"react-note-app-data\"));\n    if (savedNoted) {\n      setNotes(savedNoted);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"react-note-app-data\", JSON.stringify(notes));\n  }, [notes]);\n\n  const addNote = (text) => {\n    const date = new Date();\n    const newNote = {\n      id: nanoid(),\n      text: text,\n      isCompleted: false,\n      date: date.toLocaleDateString(),\n    };\n    const newNotes = [newNote, ...notes];\n    setNotes(newNotes);\n  };\n\n  const deleteNote = (id) => {\n    const newNotes = notes.filter((note) => note.id !== id);\n    setNotes(newNotes);\n  };\n\n  const editNote = (text, id) => {\n    const date = new Date();\n    const newNotes = notes.map((note) => {\n      if (note.id === id) {\n        note.text = text;\n        note.date = date.toLocaleDateString();\n      }\n      return note;\n    });\n    setNotes(newNotes);\n  };\n\n  const toggle = (id) => {\n    const newNotes = notes.map((note) => {\n      if (note.id === id) {\n        note.isCompleted = !false;\n      }\n      return note;\n    });\n    setNotes(newNotes);\n  };\n\n  return (\n    <div className={`${darkMode && \"dark-mode\"}`}>\n      <div className=\"container\">\n        <Header handleToggleDarkMode={setDarkMode} />\n        <Search handleSearchNote={setSearchText} />\n        <NotesList\n          notes={notes.filter((note) => note.text.includes(searchText))}\n          handleAddNote={addNote}\n          handleDeleteNote={deleteNote}\n          handleEditNote={editNote}\n          handleIsCompletedNote={toggle}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}