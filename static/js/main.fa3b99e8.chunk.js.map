{"version":3,"sources":["components/Note.js","components/AddNote.js","components/NotesList.js","components/Search.js","components/Header.js","App.js","index.js"],"names":["Note","id","text","date","isCompleted","handleDeleteNote","handleEditNote","handleIsCompletedNote","handleRestoreNote","useState","editMode","setEditMode","inputRef","useRef","motion","div","initial","x","transition","type","duration","animate","whileHover","scale","exit","className","ref","disabled","defaultValue","onFocus","e","temp_value","target","value","onChange","size","onClick","current","focus","AddNote","handleAddNote","noteText","setNoteText","rows","cols","placeholder","length","alert","trim","NotesList","notes","sort","setSort","AnimatePresence","map","note","Search","handleSearchNote","Header","handleToggleDarkMode","h1","y","previousDarkMode","App","setNotes","searchText","setSearchText","darkMode","setDarkMode","useEffect","savedNoted","JSON","parse","localStorage","getItem","setItem","stringify","filter","includes","Date","newNote","nanoid","toLocaleDateString","newNotes","class","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa3b99e8.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport { MdDeleteForever, MdEdit, MdCheck, MdRestore } from \"react-icons/md\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Note = ({\r\n  id,\r\n  text,\r\n  date,\r\n  isCompleted,\r\n  handleDeleteNote,\r\n  handleEditNote,\r\n  handleIsCompletedNote,\r\n  handleRestoreNote,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const inputRef = useRef(true);\r\n\r\n  const changeFocus = () => {\r\n    setEditMode(true);\r\n    inputRef.current.disabled = false;\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const update = (e) => {\r\n    inputRef.current.disabled = true;\r\n    setEditMode(false);\r\n  };\r\n\r\n  const moveCaretAtEnd = (e) => {\r\n    var temp_value = e.target.value;\r\n    e.target.value = \"\";\r\n    e.target.value = temp_value;\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ x: \"150vw\", transition: { type: \"spring\", duration: 1 } }}\r\n      animate={{ x: 0, transition: { type: \"spring\", duration: 2 } }}\r\n      whileHover={{ scale: 0.95, transition: { type: \"spring\", duration: 1 } }}\r\n      exit={{ x: \"-90vw\", scale: [1, 0] }}\r\n      className={`${isCompleted ? \"note complete\" : \"note\"}`}\r\n    >\r\n      <textarea\r\n        className=\"text-value\"\r\n        ref={inputRef}\r\n        disabled={inputRef}\r\n        defaultValue={text}\r\n        onFocus={moveCaretAtEnd}\r\n        onChange={(e) => {\r\n          handleEditNote(e.target.value, id);\r\n        }}\r\n      />\r\n      <div className=\"note-footer\">\r\n        <small>{date}</small>\r\n\r\n        <div>\r\n          {editMode ? (\r\n            <MdCheck\r\n              className=\"delete-icon\"\r\n              size=\"1.3em\"\r\n              onClick={(e) => update(inputRef.current.value, e)}\r\n            />\r\n          ) : (\r\n            <>\r\n              {isCompleted ? (\r\n                <>\r\n                  <MdRestore\r\n                    className=\"delete-icon\"\r\n                    size=\"1.3em\"\r\n                    onClick={() => handleRestoreNote(id)}\r\n                  />\r\n                  <MdDeleteForever\r\n                    className=\"delete-icon\"\r\n                    onClick={() => {\r\n                      handleDeleteNote(id);\r\n                    }}\r\n                    size=\"1.3em\"\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <MdEdit\r\n                    className=\"delete-icon\"\r\n                    size=\"1.3em\"\r\n                    onClick={() => changeFocus()}\r\n                  />\r\n                  <MdCheck\r\n                    className=\"delete-icon\"\r\n                    size=\"1.3em\"\r\n                    onClick={() => handleIsCompletedNote(id)}\r\n                  />\r\n                  <MdDeleteForever\r\n                    className=\"delete-icon\"\r\n                    onClick={() => {\r\n                      handleDeleteNote(id);\r\n                    }}\r\n                    size=\"1.3em\"\r\n                  />\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import { useState } from \"react\";\r\n\r\nconst AddNote = ({ handleAddNote }) => {\r\n  const [noteText, setNoteText] = useState(\"\");\r\n  const characterLimit = 200;\r\n\r\n  const handleChange = (e) => {\r\n    if (characterLimit - e.target.value.length >= 0) {\r\n      setNoteText(e.target.value);\r\n    } else {\r\n      alert(\"200 characters only!\");\r\n    }\r\n  };\r\n\r\n  const handleSaveClick = () => {\r\n    if (noteText.trim().length > 0) {\r\n      handleAddNote(noteText);\r\n      setNoteText(\"\");\r\n    } else {\r\n      alert(\"Please add note!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"note new\">\r\n      <textarea\r\n        rows=\"8\"\r\n        cols=\"10\"\r\n        placeholder=\"Type to add a note...\"\r\n        value={noteText}\r\n        onChange={handleChange}\r\n      ></textarea>\r\n      <div className=\"note-footer\">\r\n        <small>{characterLimit - noteText.length} Remaining</small>\r\n        <button className=\"save\" onClick={handleSaveClick}>\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNote;\r\n","import { useState } from \"react\";\r\nimport Note from \"./Note\";\r\nimport AddNote from \"./AddNote\";\r\nimport { AnimatePresence } from \"framer-motion\";\r\n\r\nconst NotesList = ({\r\n  notes,\r\n  handleAddNote,\r\n  handleDeleteNote,\r\n  handleEditNote,\r\n  handleIsCompletedNote,\r\n  handleRestoreNote,\r\n}) => {\r\n  const [sort, setSort] = useState(\"active\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"sort-buttons\">\r\n        <button className=\"save\" onClick={() => setSort(\"all\")}>\r\n          All\r\n        </button>\r\n        <button className=\"save\" onClick={() => setSort(\"active\")}>\r\n          Active\r\n        </button>\r\n        <button className=\"save\" onClick={() => setSort(\"completed\")}>\r\n          Completed\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"notes-list\">\r\n        <AddNote handleAddNote={handleAddNote} />\r\n\r\n        <AnimatePresence>\r\n          {notes.length > 0 && sort === \"active\"\r\n            ? notes.map((note) => {\r\n                return (\r\n                  note.isCompleted === false && (\r\n                    <Note\r\n                      key={note.id}\r\n                      id={note.id}\r\n                      text={note.text}\r\n                      isCompleted={note.isCompleted}\r\n                      date={note.date}\r\n                      handleDeleteNote={handleDeleteNote}\r\n                      handleEditNote={handleEditNote}\r\n                      handleIsCompletedNote={handleIsCompletedNote}\r\n                      handleRestoreNote={handleRestoreNote}\r\n                    />\r\n                  )\r\n                );\r\n              })\r\n            : null}\r\n\r\n          {notes.length > 0 && sort === \"all\"\r\n            ? notes.map((note) => (\r\n                <Note\r\n                  key={note.id}\r\n                  id={note.id}\r\n                  text={note.text}\r\n                  isCompleted={note.isCompleted}\r\n                  date={note.date}\r\n                  handleDeleteNote={handleDeleteNote}\r\n                  handleEditNote={handleEditNote}\r\n                  handleIsCompletedNote={handleIsCompletedNote}\r\n                  handleRestoreNote={handleRestoreNote}\r\n                />\r\n              ))\r\n            : null}\r\n\r\n          {notes.length > 0 && sort === \"completed\"\r\n            ? notes.map((note) => {\r\n                return (\r\n                  note.isCompleted === true && (\r\n                    <Note\r\n                      key={note.id}\r\n                      id={note.id}\r\n                      text={note.text}\r\n                      isCompleted={note.isCompleted}\r\n                      date={note.date}\r\n                      handleDeleteNote={handleDeleteNote}\r\n                      handleEditNote={handleEditNote}\r\n                      handleIsCompletedNote={handleIsCompletedNote}\r\n                      handleRestoreNote={handleRestoreNote}\r\n                    />\r\n                  )\r\n                );\r\n              })\r\n            : null}\r\n        </AnimatePresence>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotesList;\r\n","import React from \"react\";\r\nimport { MdSearch } from \"react-icons/md\";\r\n\r\nconst Search = ({ handleSearchNote }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <MdSearch className=\"search-icons\" size=\"1.3em\"></MdSearch>\r\n      <input\r\n        onChange={(e) => handleSearchNote(e.target.value)}\r\n        type=\"text\"\r\n        placeholder=\"type to search\"\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Header = ({ handleToggleDarkMode }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <motion.h1\r\n        initial={{ y: -200 }}\r\n        animate={{ y: 0 }}\r\n        transition={{ type: \"spring\", duration: 0.5 }}\r\n        whileHover={{ scale: 1.1 }}\r\n      >\r\n        Notes\r\n      </motion.h1>\r\n      <button\r\n        onClick={() =>\r\n          handleToggleDarkMode((previousDarkMode) => !previousDarkMode)\r\n        }\r\n        className=\"save\"\r\n      >\r\n        Dark Mode\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import NotesList from \"./components/NotesList\";\nimport Search from \"./components/Search\";\nimport Header from \"./components/Header\";\nimport { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const savedNoted = JSON.parse(localStorage.getItem(\"react-note-app-data\"));\n    if (savedNoted) {\n      setNotes(savedNoted);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"react-note-app-data\", JSON.stringify(notes));\n  }, [notes]);\n\n  const addNote = (text) => {\n    const date = new Date();\n    const newNote = {\n      id: nanoid(),\n      text: text,\n      isCompleted: false,\n      date: date.toLocaleDateString(),\n    };\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n\n  const deleteNote = (id) => {\n    const newNotes = notes.filter((note) => note.id !== id);\n    setNotes(newNotes);\n  };\n\n  const editNote = (text, id) => {\n    const date = new Date();\n    const newNotes = notes.map((note) => {\n      if (note.id === id) {\n        note.text = text;\n        note.date = date.toLocaleDateString();\n      }\n      return note;\n    });\n    setNotes(newNotes);\n  };\n\n  const toggle = (id) => {\n    const newNotes = notes.map((note) => {\n      if (note.id === id) {\n        note.isCompleted = true;\n      }\n      return note;\n    });\n    setNotes(newNotes);\n  };\n\n  const restore = (id) => {\n    const newNotes = notes.map((note) => {\n      if (note.id === id) {\n        note.isCompleted = false;\n      }\n      return note;\n    });\n    setNotes(newNotes);\n  };\n\n  return (\n    <div className={`${darkMode && \"dark-mode\"}`}>\n      <div className=\"container\">\n        <Header handleToggleDarkMode={setDarkMode} />\n        <Search handleSearchNote={setSearchText} />\n        <NotesList\n          notes={notes.filter((note) => note.text.includes(searchText))}\n          handleAddNote={addNote}\n          handleDeleteNote={deleteNote}\n          handleEditNote={editNote}\n          handleIsCompletedNote={toggle}\n          handleRestoreNote={restore}\n        />\n      </div>\n      <div class=\"footer-basic\">\n        <footer>\n          {/* <div class=\"social\">\n            <a href=\"#\">\n              <i class=\"icon ion-social-instagram\"></i>\n            </a>\n            <a href=\"#\">\n              <i class=\"icon ion-social-snapchat\"></i>\n            </a>\n            <a href=\"#\">\n              <i class=\"icon ion-social-twitter\"></i>\n            </a>\n            <a href=\"#\">\n              <i class=\"icon ion-social-facebook\"></i>\n            </a>\n          </div> */}\n          {/* <ul class=\"list-inline\">\n                <li class=\"list-inline-item\"><a href=\"#\">Home</a></li>\n                <li class=\"list-inline-item\"><a href=\"#\">Services</a></li>\n                <li class=\"list-inline-item\"><a href=\"#\">About</a></li>\n                <li class=\"list-inline-item\"><a href=\"#\">Terms</a></li>\n                <li class=\"list-inline-item\"><a href=\"#\">Privacy Policy</a></li>\n            </ul> */}\n          <p class=\"copyright\">Jolobart © 2021</p>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}